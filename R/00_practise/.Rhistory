agecat[age < 55] <- "Young"
})
View(leadership)
View(leadership)
leadership <- within(leadership, {
agecat <- NA
agecat[age > 75] <- "Elder"
agecat[age >= 55 & age <= 75] <- "Middle Aged"
agecat[age < 55] <- "Young"
})
View(leadership)
View(leadership)
# 变量重命名
# 交互式
fix(leadership)
View(leadership)
View(leadership)
# 编程式1
names(leadership)
View(leadership)
View(leadership)
leadership <- rename(leadership, c(q4_1="q4", q1="q1_test"))
# 编程式
# install.packages("plyr")
library(plyr)
leadership <- rename(leadership, c(q4_1="q4", q1="q1_test"))
View(leadership)
y <- c(1,2,3,NA)
is.na(y)
# 含缺失值的计算
x <- c(1, 2, NA, 3)
y <- x[1] + x[2] + x[3] + x[4]
z <- sum(x)
y
z
z2 <- sum(x, na.rm = TRUE)
z2
# 删除包含缺失值的行
newdata <- na.omit(leadership)
# 日期值处理
# %d: 数字表示的日期 01 - 31
# %m: 月份 01 - 12
# %Y: 四位数年份 %y: 两位数年份
# %a 缩写的星期名 %A 非缩写的星期名
# %b 缩写的月份 %B 非缩写的月份
mydates <- as.Date(c("2007-06-22", "2004-02-13"))
View(newdata)
mydates
strDates <- c("01/05/1965", "08/16/1975")
dates <- as.Date(strDates, "%m/%d/%Y")
dates
today <- Sys.Date()
format(today, "%B %d %Y")
format(today, format="%A")
difftime(today, dob, units = "years")
dob <- as.Date("1956-10-12")
difftime(today, dob, units = "years")
difftime(today, dob, units = "days")
difftime(today, dob, units = "weeks")
dob <- as.Date("1992-08-06")
difftime(today, dob, units = "weeks")
format(dob, "%A")
# 数据排序
# 默认为升序  降序加个负号即可
newdata <- leadership[order(leadership$age),]
View(newdata)
View(newdata)
newdata1 <- leadership[order(gender, -age),]
with(leadership, {
newdata1 <- leadership[order(gender, -age),]
})
View(newdata1)
View(newdata1)
a <- 4
a
# 数据集的合并
# 横向合并 merge
total <- merge(dataframeA, dataframeB, by=c("ID","Country"))
# 数据取子集
leadership[, c(6:10)]
myvars <- c("q1", "q2", "q3", "q4", "q5")
leadership[myvars]
myvars <- c("q1", "q2", "q3", "q4", "q5")
leadership[myvars]
View(leadership)
View(leadership)
myvars <- c("q2", "q3", "q4", "q5")
leadership[myvars]
myvars <- paste("q", 1:5, sep=" ")
myvars
myvars <- paste("q", 1:5, sep="")
myvars
# 剔除变量
myvars <- names(leadership) %in% c("q3", "q4")
myvars
leadership[!myvars]
leadership[c(-8, -9)]
View(leadership)
View(leadership)
leadership$q5 <- NULL
View(leadership)
View(leadership)
manager <- c(1, 2, 3, 4, 5)
date <- c("10/24/08", "10/28/08", "10/1/08", "10/12/08", "5/1/09")
country <- c("US", "US", "UK", "UK", "UK")
gender <- c("M", "F", "F", "M", "F")
age <- c(32, 57, 75, 39, 99)
q1 <- c(5, 3, 3, 3, 2)
q2 <- c(4, 5, 5, 3, 2)
q3 <- c(5, 2, 5, 4, 1)
q4 <- c(5, 5, 5, NA, 2)
q5 <- c(5, 5, 2, NA, 1)
leadership <- data.frame(manager, date, country, gender, age,
q1, q2, q3, q4, q5, stringsAsFactors=FALSE)
leadership$q5 <- leadership$q4 <- NULL
View(leadership)
View(leadership)
# 选入观测
leadership[1:3,]
leadership[leadership$gender=="M" & leadership$age >30,]
View(leadership)
leadership$date <- as.Date(leadership$date, "%m/%d/%y")
View(leadership)
View(leadership)
startdate <- as.Date("2009-01-01")
enddate <- as.Date("2009-10-31")
leadership[which(leadership$date >= startdate & leadership$date <= enddate), ]
leadership[which(leadership$date >= startdate & leadership$date <= enddate), ]
leadership[leadership$date >= startdate & leadership$date <= enddate, ]
which(leadership$date >= startdate & leadership$date <= endate)
which(leadership$date >= startdate & leadership$date <= enddate)
leadership$date >= startdate & leadership$date <= enddate
enddate <- as.Date("2019-10-31")
which(leadership$date >= startdate & leadership$date <= enddate)
View(leadership)
View(leadership)
View(leadership)
View(leadership)
startdate <- as.Date("2008-10-24")
which(leadership$date >= startdate & leadership$date <= enddate)
leadership$date >= startdate & leadership$date <= enddate
# 利用subset选择变量和观测
subset(leadership, age >= 35 | age < 24, select = c(q1, q2, q3, q4))
View(leadership)
View(leadership)
# 利用subset选择变量和观测
subset(leadership, age >= 35 | age < 24, select = c(q1, q2, q3))
subset(leadership, gender=="M" & age > 25, select = gender:q3)
sample(1:100, 5, replace = TRUE)
leadership[sample(1:nrow(leadership), 5, replace = TRUE),]
leadership[sample(1:nrow(leadership), 5, replace = FALSE),]
leadership[sample(1:nrow(leadership), 2, replace = FALSE),]
# 使用SQL
install.packages("sqldf")
# 使用SQL
# install.packages("sqldf")
library(sqldf)
# 使用SQL
install.packages("gsubfn")
# install.packages("sqldf")
library(gsubfn)
# 使用SQL
install.packages("proto")
install.packages("proto")
# install.packages("sqldf")
library(proto)
library(gsubfn)
library(sqldf)
install.packages("RSQLite")
install.packages("RSQLite")
library(RSQLite)
library(sqldf)
# install.packages("sqldf")
library(proto)
library(gsubfn)
library(RSQLite)
library(sqldf)
newdf <- sqldf("select * from mtcars where carb=1 order by mpg", row.names=TRUE)
View(newdf)
View(newdf)
cat( "Hello", name, "\b.\n", "Isn\'t R", "\t", "GREAT?\n")
name <- "Bob"
cat( "Hello", name, "\b.\n", "Isn\'t R", "\t", "GREAT?\n")
cut(c(1,2,3,4,5,6,7), 3) #
pretty(c(1,2,3,4,5,6,7), 3) #
# apply
mydata <- matrix(rnorm(30), nrow = 6)
apply(mydata, 1)
apply(mydata, 1, mean)
apply(mydata, 2, mean, trim=0.2)
names = c("John Davis"	"Angela Williams"	"Bullwinkle Moose", "David Jones",	"Janice Markhammer",	"Cheryl Cushing",	"Reuven Ytzrhak",	"Greg Knox",	"Joel England",	"Mary Rayburn")
names = c("John Davis",	"Angela Williams",	"Bullwinkle Moose", "David Jones",	"Janice Markhammer",	"Cheryl Cushing",	"Reuven Ytzrhak",	"Greg Knox",	"Joel England",	"Mary Rayburn")
math = c(502,	600,	412,	358,	495,	512,	410,	625,	573,	522)
science = c(95,	99,	80,	82,	75,	85,	80,	95,	89,	86)
english = c(25,	22,	18,	15,	20,	28,	15,	30,	27,	18)
mydata <- "
姓名	数学	科学	英语
"John Davis"	502	95	25
"Angela Williams"	600	99	22
"Bullwinkle Moose"	412	80	18
"David Jones"	358	82	15
"Janice Markhammer"	495	75	20
"Cheryl Cushing"	512	85	28
"Reuven Ytzrhak"	410	80	15
"Greg Knox"	625	95	30
"Joel England"	573	89	27
"Mary Rayburn"	522	86	18
"
mydata <- data.frame("姓名"=names, "数学"=math, "科学"=science, "英语"=english)
mydata <- data.frame("姓名"=names)
View(mydata)
View(mydata)
mydata <- data.frame("姓名"=names, "数学"=math)
mydata <- data.frame("姓名"=names, "数学"=math, "科学"=science, "英语"=english)
View(mydata)
View(mydata)
names = c("John Davis",	"Angela Williams",	"Bullwinkle Moose", "David Jones",	"Janice Markhammer",	"Cheryl Cushing",	"Reuven Ytzrhak",	"Greg Knox",	"Joel England",	"Mary Rayburn")
math = c(502,	600,	412,	358,	495,	512,	410,	625,	573,	522)
science = c(95,	99,	80,	82,	75,	85,	80,	95,	89,	86)
english = c(25,	22,	18,	15,	20,	28,	15,	30,	27,	18)
mydata <- data.frame("姓名"=names, "数学"=math, "科学"=science, "英语"=english)
# 统计标准化以消除量纲
mydata[2:4,]
# 统计标准化以消除量纲
mydata[2:4]
# 统计标准化以消除量纲
mydata[2:]
# 统计标准化以消除量纲
mydata[2:-1]
# 统计标准化以消除量纲
mydata[2:4]
# 统计标准化以消除量纲
scale(mydata[2:4])
# 统计标准化以消除量纲
mydata[2:4] <- scale(mydata[2:4])
View(mydata)
View(mydata)
mean??
help(mean)
help(mean)
help(apply)
mydata$score <- apply(mydata[2:4], 1, mean )
quantile(mydata$score,probs = c(0.2, 0.4, 0.6, 0.8))
quan <- quantile(mydata$score,probs = c(0.2, 0.4, 0.6, 0.8))
quan
quan[1]
quan[20%]
mydata$grade[mydata$score > quan[4]] <- "A"
mydata$grade[mydata$score > quan[4]] <- "A"
mydata$grade[mydata$score > quan[3] & mydata$score <= quan[4]] <- "B"
mydata$grade[mydata$score > quan[2] & mydata$score <= quan[3]] <- "C"
mydata$grade[mydata$score > quan[1] & mydata$score <= quan[2]] <- "D"
mydata$grade[mydata$score <= quan[1]] <- "E"
strsplit(mydata$姓名, " ")
strsplit(mydata$姓名)
sapply(mydata$姓名, strsplit, split=" ")
strsplit((mydata$姓名), " ")
strsplit((mydata$姓名), " ")
sapply(mydata$姓名, strsplit, split=" ")
strsplit((mydata$姓名), " ")
strsplit((mydata$姓名), " ")
strsplit((mydata$姓名), " ")
a <- strsplit((mydata$姓名), " ")
mydata$姓名
a <- strsplit((mydata$姓名), " ")
mydata$姓名
a <- strsplit((mydata$姓名), " ")
View(mydata)
View(mydata)
mydata[1]
a <- strsplit(mydata[1], " ")
a <- strsplit((mydata[1]), " ")
mydata[1]
mydata <- data.frame("names"=names, "数学"=math, "科学"=science, "英语"=english)
mydata[2:4] <- scale(mydata[2:4])
#
mydata$score <- apply(mydata[2:4], 1, mean)
quan <- quantile(mydata$score,probs = c(0.2, 0.4, 0.6, 0.8))
mydata$grade[mydata$score > quan[4]] <- "A"
mydata$grade[mydata$score > quan[3] & mydata$score <= quan[4]] <- "B"
mydata$grade[mydata$score > quan[2] & mydata$score <= quan[3]] <- "C"
mydata$grade[mydata$score > quan[1] & mydata$score <= quan[2]] <- "D"
mydata$grade[mydata$score <= quan[1]] <- "E"
mydata[1]
a <- strsplit((mydata[1]), " ")
strsplit((mydata$names), " ")
mydata$names
mydata$names
strsplit((mydata$names), "-")
mydata$names
[mydata$names]
list(mydata$names)
strsplit(list(mydata$names), " ")
str(mydata)
mydata <- data.frame("names"=names, "数学"=math, "科学"=science, "英语"=english, stringsAsFactors = False)
str(mydata)
mydata <- data.frame("names"=names, "数学"=math, "科学"=science, "英语"=english, stringsAsFactors = False)
str(mydata)
mydata <- data.frame("names"=names, "数学"=math, "科学"=science, "英语"=english, stringsAsFactors = FALSE)
str(mydata)
# 一定要加上stringsAsFactors = FALSE 否则姓名将被视为factor 而不是char 影响下面的分割
mydata <- data.frame("姓名"=names, "数学"=math, "科学"=science, "英语"=english, stringsAsFactors = FALSE)
str(mydata)
strsplit(list(mydata[1]), " ")
strsplit(mydata[1], " ")
mydata[1]
str(mydata)
mydata[2:4] <- scale(mydata[2:4])
# 综合打分
mydata$score <- apply(mydata[2:4], 1, mean)
quan <- quantile(mydata$score,probs = c(0.2, 0.4, 0.6, 0.8))
mydata$grade[mydata$score > quan[4]] <- "A"
mydata$grade[mydata$score > quan[3] & mydata$score <= quan[4]] <- "B"
mydata$grade[mydata$score > quan[2] & mydata$score <= quan[3]] <- "C"
mydata$grade[mydata$score > quan[1] & mydata$score <= quan[2]] <- "D"
mydata$grade[mydata$score <= quan[1]] <- "E"
mydata[1]
strsplit(mydata[1], " ")
mydata[1]
strsplit(mydata[1], " ")
strsplit((mydata[1]), " ")
strsplit(names, " ")
# 一定要加上stringsAsFactors = FALSE 否则姓名将被视为factor 而不是char 影响下面的分割
mydata <- data.frame("names"=names, "数学"=math, "科学"=science, "英语"=english, stringsAsFactors = FALSE)
# 统计标准化以消除量纲
mydata[2:4] <- scale(mydata[2:4])
# 综合打分
mydata$score <- apply(mydata[2:4], 1, mean)
quan <- quantile(mydata$score,probs = c(0.2, 0.4, 0.6, 0.8))
mydata$grade[mydata$score > quan[4]] <- "A"
mydata$grade[mydata$score > quan[3] & mydata$score <= quan[4]] <- "B"
mydata$grade[mydata$score > quan[2] & mydata$score <= quan[3]] <- "C"
mydata$grade[mydata$score > quan[1] & mydata$score <= quan[2]] <- "D"
mydata$grade[mydata$score <= quan[1]] <- "E"
mydata[1]
strsplit(mydata$names, " ")
mames_sep <- strsplit(mydata$names, " ")
mames_sep
mames_sep[1]
mames_sep[1][1]
mames_sep[1][1][1]
mames_sep
[(mames_sep[1])
names_sep <- strsplit(mydata$names, " ")
firstname <- sapply(names_sep, "[", 1)
firstname
lastname <- sapply(names_sep, "[", 2)
mydata[, -1]
mydata <- cbind(firstname, lastname, mydata[, -1])
# 根据姓名排序
mydata[order(lastname, firstname)]
# 根据姓名排序
mydata[order(lastname, firstname),]
for i in 1:10
print(i)
for (i in 1:10)
print(i)
i <- 10
while (i > 0)
{
print(i);
i <- i - 1;
}
# 条件执行
grade <- mydata$grade
grade
is.factor(grade)
is.character(grade)
grade
if (!is.factor(grade))
grade <- as.factor(grade)
else print("grade already is a factor")
if (!is.factor(grade))
grade <- as.factor(grade)
is.factor(grade)
if (!is.factor(grade))
grade <- as.factor(grade) else
print("grade already is a factor")
ifelse(scores>60, print("PASS"), print("FAILED"))
# ifelse(cond, statement1, statement2) cond为真是执行语句1 否则执行语句2
scores <- 90
ifelse(scores>60, print("PASS"), print("FAILED"))
feelings <- c('sad', 'afraid', 'happy')
for (feeling in feelings)
print(
switch(feeling,
'sad' = "Cheer up",
'afraid' = "There is nothing to fear",
"happy" = "I'm glad you are happy",
"angry" = "calm down now"
)
)
)
for (feeling in feelings)
print(
switch(feeling,
'sad' = "Cheer up",
'afraid' = "There is nothing to fear",
"happy" = "I'm glad you are happy",
"angry" = "calm down now"
)
)
mystats <- function(x, parametric=T, print=F){
if (parametric==T) {center = mean(x); spread = sd(x)} else
{center = median(x); spread = mad(x)}
if (print & parametric) print(cat("mean=", center, "--", "std=", spread))
if (print & parametric==F) print(cat("median=", center, "--", "std=", spread))
}
x <- c(1,2,3,5,6,3,4,6,7,4,2,5,7,5,8,9,5)
mystats(x)
mystats(x, print = T)
mystats(x, parametric = F, print = T)
mystats <- function(x, parametric=T, print=F){
options(digits = 4)
if (parametric==T) {center = mean(x); spread = sd(x)} else
{center = median(x); spread = mad(x)}
if (print & parametric) print(cat("mean=", center, "--", "std=", spread))
if (print & parametric==F) print(cat("median=", center, "--", "std=", spread))
}
mystats(x, parametric = F, print = T)
mystats <- function(x, parametric=T, print=F){
options(digits = 4)
if (parametric==T) {center = mean(x); spread = sd(x)} else
{center = median(x); spread = mad(x)}
if (print & parametric) print(cat("mean=", center, "--", "std=", spread, '\n'))
if (print & parametric==F) print(cat("median=", center, "--", "std=", spread, '\n'))
}
mystats(x, parametric = F, print = T)
mystats <- function(x, parametric=T, print=F){
options(digits = 4)
if (parametric==T) {center = mean(x); spread = sd(x)} else
{center = median(x); spread = mad(x)}
if (print & parametric) cat("mean=", center, "--", "std=", spread)
if (print & parametric==F) cat("median=", center, "--", "std=", spread')
}
mystats <- function(x, parametric=T, print=F){
options(digits = 4)
if (parametric==T) {center = mean(x); spread = sd(x)} else
{center = median(x); spread = mad(x)}
if (print & parametric) cat("mean=", center, "--", "std=", spread)
if (print & parametric==F) cat("median=", center, "--", "std=", spread)
}
mystats(x, parametric = F, print = T)
mystats(x, parametric = F, print = T)
mystats <- function(x, parametric=T, print=F){
options(digits = 4)
if (parametric==T) {center = mean(x); spread = sd(x)} else
{center = median(x); spread = mad(x)}
if (print & parametric) {cat("mean=", center, "--", "std=", spread)}
if (print & parametric==F) {cat("median=", center, "--", "std=", spread)}
}
mystats(x, parametric = F, print = T)
mystats(x, parametric = F, print = T)
mystats <- function(x, parametric=T, print=F){
options(digits = 4)
if (parametric==T) {center = mean(x); spread = sd(x)} else
{center = median(x); spread = mad(x)}
if (print & parametric) {cat("mean=", center, "--", "std=", spread)}
if (print & parametric==F) {cat("median=", center, "--", "std=", spread)}
result <- list(center=center, spread=spread)
return(result)
}
mystats(x, parametric = F, print = T)
x <- c(1,2,3,5,6,3,4,6,7,4,2,5,7,5,8,9,5)
mystats(x, parametric = F, print = T)
mystats <- function(x, parametric=T, print=F){
options(digits = 4)
if (parametric==T) {center = mean(x); spread = sd(x)} else
{center = median(x); spread = mad(x)}
if (print & parametric) {cat("mean=", center, "--", "std=", spread)}
if (print & parametric==F) {cat("median=", center, "--", "std=", spread)}
result <- list(center=center, spread=spread)
return(result)
}
x <- c(1,2,3,5,6,3,4,6,7,4,2,5,7,5,8,9,5)
mystats(x, parametric = F, print = T)
mystats <- function(x, parametric=T, print=F){
options(digits = 4)
if (parametric==T) {center = mean(x); spread = sd(x)} else
{center = median(x); spread = mad(x)}
if (print & parametric) {cat("mean=", center, "\n", "std=", spread, '\n')}
if (print & parametric==F) {cat("median=", center, "\n", "std=", spread), '\n'}
result <- list(center=center, spread=spread)
return(result)
}
mystats <- function(x, parametric=T, print=F){
options(digits = 4)
if (parametric==T) {center = mean(x); spread = sd(x)} else
{center = median(x); spread = mad(x)}
if (print & parametric) {cat("mean=", center, "\n", "std=", spread, '\n')}
if (print & parametric==F) {cat("median=", center, "\n", "std=", spread, '\n')}
result <- list(center=center, spread=spread)
return(result)
}
mystats(x, parametric = F, print = T)
a=mystats(x, parametric = F, print = T)
a$center
a=mystats(x, parametric = T, print = T)
mydate <- function(type="long"){
switch(type,
long = format(Sys.time(), "%A %B %d %Y"),
short = format(Sys.time(), "%m-%d-%y"),
cat(type, "is not a recognized type\n") # 只有在type取值不属于long或short时才会执行
)
}
mydate()
mydate("short")
mydate("ds")
setwd("E:/projects/R/00_practise")
Sys.getenv("R_HOME")
ys.getenv("HOME")
Sys.getenv("HOME")
